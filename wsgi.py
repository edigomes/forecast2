#!/usr/bin/env python3
"""
WSGI Entry Point para Gunicorn

Este arquivo √© usado pelo Gunicorn como ponto de entrada da aplica√ß√£o Flask.
Garante que a aplica√ß√£o seja inicializada corretamente em produ√ß√£o.
"""

import os
import sys
import logging
from pathlib import Path

# Adicionar diret√≥rio atual ao path Python
current_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(current_dir))

# Configurar logging antes de importar a aplica√ß√£o
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

try:
    # Importar a aplica√ß√£o Flask
    from server import app
    
    # Configura√ß√µes espec√≠ficas para produ√ß√£o
    if os.getenv("ENVIRONMENT") == "production":
        # Desabilitar debug em produ√ß√£o
        app.config['DEBUG'] = False
        app.config['TESTING'] = False
        
        # Configurar SECRET_KEY se n√£o estiver definida
        if not app.config.get('SECRET_KEY'):
            app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'forecast-secret-key-change-in-production')
            
        logger.info("üè≠ Aplica√ß√£o configurada para PRODU√á√ÉO")
        
    else:
        logger.info("üõ†Ô∏è  Aplica√ß√£o configurada para DESENVOLVIMENTO")
    
    # Verificar se CORS est√° configurado
    logger.info("üåê CORS configurado - aceita requests de qualquer origem")
    
    # Log das configura√ß√µes principais
    logger.info(f"üìç Diret√≥rio de trabalho: {current_dir}")
    logger.info(f"üîß Modo Debug: {app.config.get('DEBUG', False)}")
    logger.info(f"üåç Ambiente: {os.getenv('ENVIRONMENT', 'development')}")
    
    # Testar importa√ß√µes cr√≠ticas
    try:
        from modelo import ModeloAjustado
        logger.info("‚úÖ Modelo importado com sucesso")
    except ImportError as e:
        logger.error(f"‚ùå Erro ao importar modelo: {e}")
        raise
    
    try:
        from feriados_brasil import FeriadosBrasil
        logger.info("‚úÖ Feriados Brasil importado com sucesso")
    except ImportError as e:
        logger.error(f"‚ùå Erro ao importar feriados: {e}")
        raise
    
    # Verificar depend√™ncias cr√≠ticas
    try:
        import pandas as pd
        import numpy as np
        import flask_cors
        logger.info("‚úÖ Depend√™ncias principais verificadas")
    except ImportError as e:
        logger.error(f"‚ùå Depend√™ncia cr√≠tica n√£o encontrada: {e}")
        raise
    
    logger.info("üöÄ Aplica√ß√£o Flask pronta para Gunicorn")
    
except Exception as e:
    logger.error(f"‚ùå Erro ao inicializar aplica√ß√£o: {e}")
    logger.error("Stack trace:", exc_info=True)
    raise

# Expor aplica√ß√£o para Gunicorn
# Gunicorn procura por 'application' por padr√£o
application = app

# Alias para compatibilidade
if __name__ == "__main__":
    # Este bloco √© executado apenas se o arquivo for executado diretamente
    # Em produ√ß√£o, Gunicorn importa este arquivo como m√≥dulo
    logger.info("‚ö†Ô∏è  Executando diretamente - use Gunicorn em produ√ß√£o")
    app.run(debug=True, host='0.0.0.0', port=5000) 