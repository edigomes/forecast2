#!/usr/bin/env python3
"""
Advanced Sporadic MRP Planner
Classe avan√ßada para planejamento de lotes de produ√ß√£o/compra para demandas espor√°dicas
usando algoritmos de supply chain com base em supplychainpy e c√°lculos manuais otimizados.

Mant√©m 100% de compatibilidade com os analytics existentes e adiciona intelig√™ncia avan√ßada.
"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional, Union
from scipy import stats
from dataclasses import dataclass
import json
import math

# Tentar importar supplychainpy, mas n√£o falhar se n√£o estiver dispon√≠vel
try:
    from supplychainpy import model_demand, model_inventory, eoq, demand
    SUPPLYCHAINPY_AVAILABLE = True
except ImportError:
    SUPPLYCHAINPY_AVAILABLE = False

# Importar estruturas existentes
from mrp import BatchResult, OptimizationParams, clean_for_json


@dataclass
class AdvancedMRPCalculations:
    """Estrutura para armazenar c√°lculos avan√ßados de MRP"""
    eoq: float
    safety_stock: float
    reorder_point: float
    lead_time_demand: float
    lead_time_demand_std: float
    service_level_z_score: float
    holding_cost_per_unit: float
    annual_demand: float
    demand_variability: float
    abc_classification: str
    xyz_classification: str


class AdvancedSporadicMRPPlanner:
    """
    Planejador avan√ßado de MRP para demandas espor√°dicas
    
    Implementa algoritmos sofisticados de supply chain baseados em:
    - Economic Order Quantity (EOQ) otimizado
    - An√°lise ABC/XYZ de demandas
    - Safety Stock calculado por m√∫ltiplos m√©todos
    - Reorder Point din√¢mico
    - An√°lise de variabilidade de demanda
    - Consolida√ß√£o inteligente baseada em lead time overlap
    - Previs√£o de demanda para lead times longos
    """
    
    def __init__(self, optimization_params: Optional[OptimizationParams] = None):
        self.params = optimization_params or OptimizationParams()
        self.calculations_cache = {}
        
    def plan_sporadic_batches_advanced(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        max_gap_days: int,
        unit_cost: float = 100.0,  # Custo unit√°rio padr√£o para c√°lculos
        ignore_safety_stock: bool = False  # üéØ NOVO: Ignorar estoques de seguran√ßa
    ) -> List[BatchResult]:
        """
        Algoritmo avan√ßado para planejamento de lotes espor√°dicos
        
        Usa m√∫ltiplas estrat√©gias:
        1. An√°lise ABC/XYZ das demandas
        2. C√°lculo EOQ otimizado por grupo
        3. Safety stock baseado em variabilidade real
        4. Consolida√ß√£o inteligente com an√°lise de custos
        5. Preven√ß√£o de stockout com simula√ß√£o Monte Carlo
        """
        
        if not valid_demands:
            return []
        
        # üéØ VERIFICA√á√ÉO ESPECIAL: Se ignore_safety_stock=True, usar l√≥gica simplificada
        if ignore_safety_stock:
            total_demand = sum(valid_demands.values())
            if initial_stock >= total_demand:
                # Estoque inicial √© suficiente - retornar sem lotes
                return []
            else:
                # Criar apenas um lote com a quantidade exata necess√°ria
                return self._create_exact_quantity_batch(
                    valid_demands, initial_stock, leadtime_days, start_period, end_period,
                    start_cutoff, end_cutoff, safety_days
                )
        
        # üéØ L√ìGICA CORRETA: Aplicar margem APENAS quando h√° d√©ficit real
        total_demand = sum(valid_demands.values())
        
        if initial_stock >= total_demand:
            # Estoque suficiente para cobrir demanda - retornar sem lotes
            return []
        
        # Etapa 1: An√°lise avan√ßada das demandas
        demand_analysis = self._analyze_demand_patterns_advanced(valid_demands, leadtime_days)
        
        # Etapa 2: C√°lculos MRP avan√ßados
        mrp_calcs = self._calculate_advanced_mrp_parameters(
            demand_analysis, leadtime_days, unit_cost
        )
        
        # ====== ESTRAT√âGIAS SIMPLIFICADAS - FOCO EM EFIC√ÅCIA ======
        # OBJETIVO: Insumos na data certa + estoque m√≠nimo + respeitar lead times
        # PRINC√çPIO: Evitar complexidade desnecess√°ria, manter compatibilidade dos analytics
        
        if leadtime_days == 0:
            # ‚úÖ Lead time zero - produ√ß√£o instant√¢nea (FUNCIONA PERFEITAMENTE)
            return self._just_in_time_strategy(
                valid_demands, initial_stock, leadtime_days, start_period, end_period,
                start_cutoff, end_cutoff, safety_days, safety_margin_percent, 
                absolute_minimum_stock, mrp_calcs, demand_analysis
            )
        elif leadtime_days <= 14:
            # ‚úÖ Lead time curto - estrat√©gia otimizada (FUNCIONA PERFEITAMENTE)
            return self._short_leadtime_sporadic_strategy(
                valid_demands, initial_stock, leadtime_days, start_period, end_period,
                start_cutoff, end_cutoff, safety_days, safety_margin_percent, 
                absolute_minimum_stock, mrp_calcs, demand_analysis, max_gap_days
            )
        elif 15 <= leadtime_days <= 45:
            # ‚úÖ Lead time m√©dio - estrat√©gia espec√≠fica (FUNCIONA PERFEITAMENTE)
            return self._medium_leadtime_sporadic_strategy(
                valid_demands, initial_stock, leadtime_days, start_period, end_period,
                start_cutoff, end_cutoff, safety_days, safety_margin_percent, 
                absolute_minimum_stock, mrp_calcs, demand_analysis, max_gap_days
            )
        else:
            # ‚úÖ Lead time longo (>45 dias) - consolida√ß√£o inteligente (SIMPLES E EFICAZ)
            return self._hybrid_consolidation_strategy(
                valid_demands, initial_stock, leadtime_days, start_period, end_period,
                start_cutoff, end_cutoff, safety_days, safety_margin_percent, 
                absolute_minimum_stock, mrp_calcs, demand_analysis, max_gap_days
            )
        
        # ====== ESTRAT√âGIAS EM STANDBY (COMENTADAS) ======
        # Estas estrat√©gias est√£o comentadas para simplificar o sistema:
        #
        # ‚ùå EOQ Cl√°ssico - muito complexo para demandas espor√°dicas
        # elif demand_analysis['abc_class'] == 'A' and demand_analysis['xyz_class'] in ['X', 'Y']:
        #     return self._eoq_based_strategy(...)
        #
        # ‚ùå Buffer Din√¢mico - complexidade desnecess√°ria
        # elif demand_analysis['variability_level'] == 'high':
        #     return self._dynamic_buffer_strategy(...)
        #
        # ‚ùå Previs√£o Avan√ßada - muito complexa para lead times longos
        # elif leadtime_days > 45:
        #     return self._long_leadtime_forecasting_strategy(...)
    
    def _create_exact_quantity_batch(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int
    ) -> List[BatchResult]:
        """
        Cria um lote com quantidade exata para zerar estoque quando ignore_safety_stock=True
        """
        total_demand = sum(valid_demands.values())
        deficit = total_demand - initial_stock
        
        if deficit <= 0:
            return []
        
        # Encontrar a primeira demanda para definir data do lote
        first_demand_date = min(pd.to_datetime(date) for date in valid_demands.keys())
        
        # Calcular datas do pedido considerando lead time e safety days
        target_arrival_date = first_demand_date - pd.Timedelta(days=safety_days)
        order_date = target_arrival_date - pd.Timedelta(days=leadtime_days)
        order_date = max(order_date, start_cutoff)
        actual_arrival_date = order_date + pd.Timedelta(days=leadtime_days)
        
        # Verificar se chegar√° dentro do per√≠odo v√°lido
        if actual_arrival_date > end_cutoff:
            actual_arrival_date = end_cutoff
            order_date = actual_arrival_date - pd.Timedelta(days=leadtime_days)
        
        # Criar analytics simplificados
        analytics = {
            'stock_before_arrival': initial_stock,
            'stock_after_arrival': initial_stock + deficit,
            'coverage_days': 0,
            'actual_lead_time': leadtime_days,
            'urgency_level': 'normal',
            'production_start_delay': 0,
            'arrival_delay': 0,
            'target_demand_date': min(valid_demands.keys()),
            'target_demand_quantity': total_demand,
            'shortfall_covered': deficit,
            'safety_margin_percent': 0.0,  # Sem margem de seguran√ßa
            'exact_quantity_mode': True,  # Flag especial
            'ignore_safety_stock_applied': True
        }
        
        # Criar o lote
        batch = BatchResult(
            order_date=order_date.strftime('%Y-%m-%d'),
            arrival_date=actual_arrival_date.strftime('%Y-%m-%d'),
            quantity=deficit,  # Quantidade exata necess√°ria
            analytics=analytics
        )
        
        print(f"üéØ EXACT QUANTITY BATCH: deficit={deficit}, order_date={order_date.strftime('%Y-%m-%d')}, arrival_date={actual_arrival_date.strftime('%Y-%m-%d')}")
        
        return [batch]
    
    def _create_safety_margin_batch(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float
    ) -> List[BatchResult]:
        """
        Cria um lote especificamente para cobrir a margem de seguran√ßa quando estoque inicial
        j√° cobre a demanda, mas n√£o cobre a demanda + margem de seguran√ßa
        """
        total_demand = sum(valid_demands.values())
        safety_margin = total_demand * (safety_margin_percent / 100.0)
        
        if safety_margin <= 0:
            return []
        
        # Encontrar a primeira demanda para definir data do lote
        first_demand_date = min(pd.to_datetime(date) for date in valid_demands.keys())
        
        # Calcular datas do pedido considerando lead time e safety days
        target_arrival_date = first_demand_date - pd.Timedelta(days=safety_days)
        order_date = target_arrival_date - pd.Timedelta(days=leadtime_days)
        order_date = max(order_date, start_cutoff)
        actual_arrival_date = order_date + pd.Timedelta(days=leadtime_days)
        
        # Verificar se chegar√° dentro do per√≠odo v√°lido
        if actual_arrival_date > end_cutoff:
            actual_arrival_date = end_cutoff
            order_date = actual_arrival_date - pd.Timedelta(days=leadtime_days)
        
        # Criar analytics para margem de seguran√ßa
        analytics = {
            'stock_before_arrival': initial_stock,
            'stock_after_arrival': initial_stock + safety_margin,
            'coverage_days': 0,
            'actual_lead_time': leadtime_days,
            'urgency_level': 'normal',
            'production_start_delay': 0,
            'arrival_delay': 0,
            'target_demand_date': min(valid_demands.keys()),
            'target_demand_quantity': total_demand,
            'shortfall_covered': 0,
            'safety_margin_percent': safety_margin_percent,
            'safety_margin_quantity': safety_margin,
            'safety_margin_mode': True,  # Flag especial
            'demands_covered': [{'date': date, 'quantity': qty} for date, qty in valid_demands.items()]
        }
        
        # Criar o lote para margem de seguran√ßa
        batch = BatchResult(
            order_date=order_date.strftime('%Y-%m-%d'),
            arrival_date=actual_arrival_date.strftime('%Y-%m-%d'),
            quantity=safety_margin,  # Apenas a margem de seguran√ßa
            analytics=analytics
        )
        
        print(f"üéØ SAFETY MARGIN BATCH: margin={safety_margin:.2f} ({safety_margin_percent}%), order_date={order_date.strftime('%Y-%m-%d')}, arrival_date={actual_arrival_date.strftime('%Y-%m-%d')}")
        
        return [batch]
    
    def _analyze_demand_patterns_advanced(
        self, 
        valid_demands: Dict[str, float], 
        leadtime_days: int
    ) -> Dict:
        """An√°lise avan√ßada dos padr√µes de demanda"""
        
        demands = list(valid_demands.values())
        dates = [pd.to_datetime(d) for d in valid_demands.keys()]
        
        if not demands:
            return self._get_empty_demand_analysis()
        
        # Estat√≠sticas b√°sicas
        total_demand = sum(demands)
        mean_demand = np.mean(demands)
        std_demand = np.std(demands)
        cv = std_demand / mean_demand if mean_demand > 0 else 0
        
        # An√°lise de intervalos
        intervals = []
        for i in range(1, len(dates)):
            interval = (dates[i] - dates[i-1]).days
            intervals.append(interval)
        
        # Classifica√ß√£o ABC (baseada em valor total)
        abc_class = self._classify_abc(total_demand)
        
        # Classifica√ß√£o XYZ (baseada em variabilidade)
        xyz_class = self._classify_xyz(cv)
        
        # An√°lise de sazonalidade
        seasonality = self._detect_seasonality_advanced(dates, demands)
        
        # Tend√™ncia
        trend = self._calculate_trend_advanced(dates, demands)
        
        # Variabilidade de intervalos
        interval_cv = np.std(intervals) / np.mean(intervals) if intervals and np.mean(intervals) > 0 else 0
        
        return {
            'total_demand': total_demand,
            'mean_demand': mean_demand,
            'std_demand': std_demand,
            'cv': cv,
            'abc_class': abc_class,
            'xyz_class': xyz_class,
            'variability_level': 'low' if cv < 0.3 else ('medium' if cv < 0.7 else 'high'),
            'intervals': intervals,
            'mean_interval': np.mean(intervals) if intervals else 0,
            'interval_cv': interval_cv,
            'seasonality': seasonality,
            'trend': trend,
            'demand_concentration': len(demands) / ((dates[-1] - dates[0]).days + 1) if len(dates) > 1 else 1,
            'peak_demands': [d for d in demands if d > mean_demand * 1.5],
            'regularity_score': self._calculate_regularity_score(intervals)
        }
    
    def _calculate_advanced_mrp_parameters(
        self,
        demand_analysis: Dict,
        leadtime_days: int,
        unit_cost: float
    ) -> AdvancedMRPCalculations:
        """Calcula par√¢metros MRP usando f√≥rmulas avan√ßadas"""
        
        annual_demand = demand_analysis['total_demand'] * (365 / 90)  # Anualizar baseado em 90 dias
        
        # EOQ usando m√∫ltiplas abordagens
        if SUPPLYCHAINPY_AVAILABLE and annual_demand > 0:
            try:
                # Usar supplychainpy se dispon√≠vel
                eoq_classic = self._calculate_eoq_supplychainpy(
                    annual_demand, self.params.setup_cost, unit_cost * self.params.holding_cost_rate
                )
            except:
                eoq_classic = self._calculate_eoq_manual(
                    annual_demand, self.params.setup_cost, unit_cost * self.params.holding_cost_rate
                )
        else:
            eoq_classic = self._calculate_eoq_manual(
                annual_demand, self.params.setup_cost, unit_cost * self.params.holding_cost_rate
            )
        
        # Ajustar EOQ baseado no padr√£o de demanda
        eoq_adjusted = self._adjust_eoq_for_sporadic_demand(eoq_classic, demand_analysis, leadtime_days)
        
        # Safety Stock usando m√∫ltiplos m√©todos
        safety_stock = self._calculate_safety_stock_advanced(
            demand_analysis['std_demand'], 
            leadtime_days, 
            self.params.service_level,
            demand_analysis
        )
        
        # Lead time demand
        lead_time_demand = demand_analysis['mean_demand'] * (leadtime_days / (demand_analysis['mean_interval'] or 1))
        lead_time_demand_std = demand_analysis['std_demand'] * np.sqrt(leadtime_days / (demand_analysis['mean_interval'] or 1))
        
        # Reorder point
        reorder_point = lead_time_demand + safety_stock
        
        # Service level Z-score
        service_level_z_score = stats.norm.ppf(self.params.service_level)
        
        return AdvancedMRPCalculations(
            eoq=eoq_adjusted,
            safety_stock=safety_stock,
            reorder_point=reorder_point,
            lead_time_demand=lead_time_demand,
            lead_time_demand_std=lead_time_demand_std,
            service_level_z_score=service_level_z_score,
            holding_cost_per_unit=unit_cost * self.params.holding_cost_rate,
            annual_demand=annual_demand,
            demand_variability=demand_analysis['cv'],
            abc_classification=demand_analysis['abc_class'],
            xyz_classification=demand_analysis['xyz_class']
        ) 
    
    def _calculate_eoq_manual(self, annual_demand: float, setup_cost: float, holding_cost: float) -> float:
        """Calcula EOQ usando f√≥rmula cl√°ssica"""
        if annual_demand <= 0 or setup_cost <= 0 or holding_cost <= 0:
            return self.params.min_batch_size
        
        eoq = math.sqrt(2 * annual_demand * setup_cost / holding_cost)
        return max(self.params.min_batch_size, min(self.params.max_batch_size, eoq))
    
    def _calculate_eoq_supplychainpy(self, annual_demand: float, setup_cost: float, holding_cost: float) -> float:
        """Calcula EOQ usando supplychainpy se dispon√≠vel"""
        try:
            result = eoq.economic_order_quantity(
                demand=annual_demand,
                ordering_cost=setup_cost,
                holding_cost=holding_cost
            )
            return max(self.params.min_batch_size, min(self.params.max_batch_size, result))
        except:
            return self._calculate_eoq_manual(annual_demand, setup_cost, holding_cost)
    
    def _adjust_eoq_for_sporadic_demand(
        self, 
        base_eoq: float, 
        demand_analysis: Dict, 
        leadtime_days: int
    ) -> float:
        """Ajusta EOQ para caracter√≠sticas de demanda espor√°dica"""
        
        # Fator de ajuste baseado na variabilidade
        variability_factor = 1.0
        if demand_analysis['cv'] > 0.5:  # Alta variabilidade
            variability_factor = 0.8  # Reduzir lotes para maior flexibilidade
        elif demand_analysis['cv'] < 0.2:  # Baixa variabilidade
            variability_factor = 1.2  # Permitir lotes maiores
        
        # Fator de ajuste baseado na regularidade
        regularity_factor = 1.0
        regularity_score = demand_analysis.get('regularity_score', 0.5)
        if regularity_score < 0.3:  # Muito irregular
            regularity_factor = 0.7
        elif regularity_score > 0.7:  # Muito regular
            regularity_factor = 1.1
        
        # Fator de ajuste baseado no lead time
        leadtime_factor = 1.0
        if leadtime_days > 30:  # Lead time longo
            leadtime_factor = 1.3  # Lotes maiores para cobrir incerteza
        elif leadtime_days < 7:  # Lead time curto
            leadtime_factor = 0.9  # Lotes menores, mais frequentes
        
        adjusted_eoq = base_eoq * variability_factor * regularity_factor * leadtime_factor
        
        # Garantir que est√° dentro dos limites
        return max(self.params.min_batch_size, min(self.params.max_batch_size, adjusted_eoq))
    
    def _calculate_safety_stock_advanced(
        self,
        demand_std: float,
        leadtime_days: int,
        service_level: float,
        demand_analysis: Dict
    ) -> float:
        """Calcula safety stock usando m√∫ltiplos m√©todos e escolhe o melhor"""
        
        if demand_std <= 0 or leadtime_days <= 0:
            return 0
        
        z_score = stats.norm.ppf(service_level)
        
        # M√©todo 1: F√≥rmula cl√°ssica
        safety_stock_classic = z_score * demand_std * math.sqrt(leadtime_days)
        
        # M√©todo 2: Ajustado para demanda espor√°dica
        # Considerar que demandas espor√°dicas t√™m intervalos
        mean_interval = demand_analysis.get('mean_interval', 1)
        effective_leadtime = leadtime_days / max(1, mean_interval / 7)  # Normalizar para semanas
        safety_stock_sporadic = z_score * demand_std * math.sqrt(effective_leadtime)
        
        # M√©todo 3: Baseado na variabilidade dos intervalos
        interval_cv = demand_analysis.get('interval_cv', 0)
        interval_adjustment = 1 + (interval_cv * 0.5)  # Ajuste baseado na irregularidade
        safety_stock_interval = safety_stock_classic * interval_adjustment
        
        # M√©todo 4: MAD (Mean Absolute Deviation) se dispon√≠vel
        demands = list(demand_analysis.get('demands', [demand_analysis.get('mean_demand', 0)]))
        if len(demands) > 2:
            mad = np.mean(np.abs(demands - np.mean(demands)))
            safety_stock_mad = z_score * mad * math.sqrt(leadtime_days) * 1.25  # Fator MAD
        else:
            safety_stock_mad = safety_stock_classic
        
        # Escolher o m√©todo mais apropriado baseado nas caracter√≠sticas
        if demand_analysis['variability_level'] == 'high':
            # Para alta variabilidade, usar m√©todo mais conservador
            safety_stock = max(safety_stock_interval, safety_stock_mad)
        elif interval_cv > 0.5:
            # Para intervalos muito irregulares, usar m√©todo espec√≠fico
            safety_stock = safety_stock_interval
        else:
            # Para casos normais, usar f√≥rmula cl√°ssica
            safety_stock = safety_stock_classic
        
        # Limitar valores extremos
        max_reasonable_safety = demand_analysis['mean_demand'] * leadtime_days * 0.5
        return min(safety_stock, max_reasonable_safety)
    
    def _classify_abc(self, total_value: float) -> str:
        """Classifica√ß√£o ABC baseada no valor total"""
        # Thresholds podem ser ajustados baseados no contexto
        if total_value > 10000:
            return 'A'
        elif total_value > 2000:
            return 'B'
        else:
            return 'C'
    
    def _classify_xyz(self, cv: float) -> str:
        """Classifica√ß√£o XYZ baseada na variabilidade"""
        if cv < 0.3:
            return 'X'  # Baixa variabilidade, alta previsibilidade
        elif cv < 0.7:
            return 'Y'  # M√©dia variabilidade
        else:
            return 'Z'  # Alta variabilidade, baixa previsibilidade
    
    def _detect_seasonality_advanced(self, dates: List, demands: List) -> Dict:
        """Detec√ß√£o avan√ßada de sazonalidade"""
        if len(dates) < 4:
            return {'detected': False, 'type': 'none', 'strength': 0}
        
        # Converter para series temporal
        df = pd.DataFrame({'date': dates, 'demand': demands})
        df['weekday'] = df['date'].dt.dayofweek
        df['day'] = df['date'].dt.day
        df['month'] = df['date'].dt.month
        
        # An√°lise semanal
        weekly_pattern = df.groupby('weekday')['demand'].mean()
        weekly_cv = weekly_pattern.std() / weekly_pattern.mean() if weekly_pattern.mean() > 0 else 0
        
        # An√°lise mensal
        monthly_pattern = df.groupby('month')['demand'].mean()
        monthly_cv = monthly_pattern.std() / monthly_pattern.mean() if monthly_pattern.mean() > 0 else 0
        
        # Determinar tipo de sazonalidade
        if weekly_cv > 0.3:
            return {'detected': True, 'type': 'weekly', 'strength': weekly_cv}
        elif monthly_cv > 0.3:
            return {'detected': True, 'type': 'monthly', 'strength': monthly_cv}
        else:
            return {'detected': False, 'type': 'none', 'strength': 0}
    
    def _calculate_trend_advanced(self, dates: List, demands: List) -> Dict:
        """An√°lise de tend√™ncia avan√ßada"""
        if len(dates) < 3:
            return {'direction': 'stable', 'strength': 0, 'significance': 'low'}
        
        # Converter para n√∫meros ordinais para regress√£o
        date_ordinals = [d.toordinal() for d in dates]
        
        # Regress√£o linear
        slope, intercept = np.polyfit(date_ordinals, demands, 1)
        
        # Determinar signific√¢ncia
        correlation = np.corrcoef(date_ordinals, demands)[0, 1]
        significance = 'high' if abs(correlation) > 0.7 else ('medium' if abs(correlation) > 0.4 else 'low')
        
        # Determinar dire√ß√£o
        if slope > np.mean(demands) * 0.01:  # Mais de 1% da m√©dia por dia
            direction = 'increasing'
        elif slope < -np.mean(demands) * 0.01:
            direction = 'decreasing'
        else:
            direction = 'stable'
        
        return {
            'direction': direction,
            'strength': abs(slope),
            'significance': significance,
            'correlation': correlation
        }
    
    def _calculate_regularity_score(self, intervals: List[int]) -> float:
        """Calcula score de regularidade dos intervalos"""
        if len(intervals) < 2:
            return 1.0
        
        # Coeficiente de varia√ß√£o dos intervalos
        cv = np.std(intervals) / np.mean(intervals) if np.mean(intervals) > 0 else 1
        
        # Score inverso - quanto menor CV, maior regularidade
        regularity = 1 / (1 + cv)
        return min(1.0, max(0.0, regularity))
    
    def _get_empty_demand_analysis(self) -> Dict:
        """Retorna an√°lise vazia para casos extremos"""
        return {
            'total_demand': 0,
            'mean_demand': 0,
            'std_demand': 0,
            'cv': 0,
            'abc_class': 'C',
            'xyz_class': 'Z',
            'variability_level': 'high',
            'intervals': [],
            'mean_interval': 0,
            'interval_cv': 0,
            'seasonality': {'detected': False, 'type': 'none', 'strength': 0},
            'trend': {'direction': 'stable', 'strength': 0, 'significance': 'low'},
            'demand_concentration': 0,
            'peak_demands': [],
            'regularity_score': 0
        } 

    # =============== ESTRAT√âGIAS DE PLANEJAMENTO ===============
    
    # ====== ESTRAT√âGIA EOQ CL√ÅSSICA (EM STANDBY) ======
    # Esta estrat√©gia est√° comentada por ser muito complexa para demandas espor√°dicas
    # Pode ser reativada no futuro se necess√°rio
    def _eoq_based_strategy_STANDBY(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict
    ) -> List[BatchResult]:
        """Estrat√©gia baseada em EOQ cl√°ssico para demandas previs√≠veis"""
        
        batches = []
        current_stock = initial_stock
        
        # Usar EOQ como tamanho base dos lotes
        base_batch_size = mrp_calcs.eoq
        
        # Calcular quando fazer pedidos baseado no reorder point
        demand_dates = sorted(valid_demands.keys())
        
        for i, demand_date_str in enumerate(demand_dates):
            demand_date = pd.to_datetime(demand_date_str)
            demand_qty = valid_demands[demand_date_str]
            
            # Projetar estoque at√© esta data
            stock_at_demand = self._project_stock_to_date(
                current_stock, valid_demands, batches, demand_date_str, start_period
            )
            
            # Verificar se precisa de pedido
            if stock_at_demand < mrp_calcs.reorder_point:
                
                # Calcular data √≥tima do pedido
                order_date = demand_date - pd.Timedelta(days=leadtime_days + safety_days)
                order_date = max(order_date, start_cutoff)
                arrival_date = order_date + pd.Timedelta(days=leadtime_days)
                
                # Verificar se chegar√° a tempo
                if arrival_date <= end_cutoff:
                    
                    # Calcular quantidade: usar EOQ mas ajustar para d√©ficit
                    shortfall = max(0, mrp_calcs.reorder_point - stock_at_demand)
                    batch_quantity = max(base_batch_size, shortfall + demand_qty)
                    
                    # Aplicar limites
                    batch_quantity = max(self.params.min_batch_size, 
                                       min(self.params.max_batch_size, batch_quantity))
                    
                    # Criar analytics avan√ßados
                    analytics = self._create_advanced_batch_analytics(
                        demand_date_str, demand_qty, batch_quantity, stock_at_demand,
                        arrival_date, leadtime_days, safety_days, mrp_calcs, demand_analysis,
                        strategy='eoq_based'
                    )
                    
                    batch = BatchResult(
                        order_date=order_date.strftime('%Y-%m-%d'),
                        arrival_date=arrival_date.strftime('%Y-%m-%d'),
                        quantity=round(batch_quantity, 3),
                        analytics=analytics
                    )
                    batches.append(batch)
                    current_stock = stock_at_demand + batch_quantity
        
        return batches
    
    def _just_in_time_strategy(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict
    ) -> List[BatchResult]:
        """
        ESTRAT√âGIA JUST-IN-TIME: Para lead time ZERO (produ√ß√£o instant√¢nea)
        
        Caracter√≠sticas:
        - Cada demanda gera seu pr√≥prio lote
        - Lotes chegam exatamente na data da demanda
        - Quantidade calculada para cobrir demanda + margem de seguran√ßa
        - N√£o h√° antecipa√ß√£o de estoque
        """
        
        batches = []
        current_stock = initial_stock
        
        # Processar cada demanda individualmente
        demand_dates = sorted(valid_demands.keys())
        
        for i, demand_date_str in enumerate(demand_dates):
            demand_qty = valid_demands[demand_date_str]
            demand_date = pd.to_datetime(demand_date_str)
            
            # Verificar se est√° dentro do per√≠odo v√°lido
            if not (start_cutoff <= demand_date <= end_cutoff):
                continue
            
            # Calcular estoque projetado na data da demanda
            stock_before = self._project_stock_to_date(
                initial_stock, valid_demands, batches, demand_date_str, start_period
            )
            
            # L√ìGICA MELHORADA: Para lead time zero, considerar demandas futuras
            remaining_demands = []
            for j in range(i, len(demand_dates)):
                future_date = demand_dates[j]
                future_qty = valid_demands[future_date]
                remaining_demands.append(future_qty)
            
            total_future_demand = sum(remaining_demands)
            
            # Para lead time zero, ser mais proativo
            # Crit√©rio: criar lote se estoque n√£o cobre esta demanda + pelo menos a pr√≥xima
            needs_batch = False
            
            if stock_before < demand_qty:
                # D√©ficit imediato - SEMPRE criar lote
                needs_batch = True
                shortage = demand_qty - stock_before
            elif i < len(demand_dates) - 1:
                # N√£o √© a √∫ltima demanda - verificar se cobre esta + pr√≥xima
                next_demand = valid_demands[demand_dates[i + 1]]
                if stock_before < demand_qty + (next_demand * 0.5):  # 50% da pr√≥xima como buffer
                    needs_batch = True
                    shortage = (demand_qty + next_demand) - stock_before
                else:
                    shortage = 0
            else:
                # √öltima demanda - verificar apenas esta
                shortage = max(0, demand_qty - stock_before)
                needs_batch = shortage > 0
            
            # Se precisa de lote, criar
            if needs_batch and shortage > 0:
                # Quantidade com margem de seguran√ßa
                safety_buffer = demand_qty * (safety_margin_percent / 100) if safety_margin_percent > 0 else 0
                batch_quantity = shortage + safety_buffer
                
                # Aplicar limites
                batch_quantity = max(self.params.min_batch_size, 
                                   min(self.params.max_batch_size, batch_quantity))
                
                # Para lead time 0, order_date = arrival_date = demand_date
                order_date = demand_date
                arrival_date = demand_date
                
                # Criar analytics avan√ßados
                analytics = self._create_advanced_batch_analytics(
                    demand_date_str, demand_qty, batch_quantity, stock_before,
                    arrival_date, leadtime_days, safety_days, mrp_calcs, 
                    demand_analysis, "just_in_time",
                    {
                        "shortage_covered": shortage,
                        "safety_buffer": safety_buffer,
                        "jit_optimal": True,
                        "timing_perfect": True,
                        "demand_coverage": 100.0
                    }
                )
                
                # Criar o lote
                batch = BatchResult(
                    order_date=order_date.strftime('%Y-%m-%d'),
                    arrival_date=arrival_date.strftime('%Y-%m-%d'),
                    quantity=batch_quantity,
                    analytics=analytics
                )
                
                batches.append(batch)
                
                # Atualizar estoque atual
                current_stock = stock_before + batch_quantity - demand_qty
        
        return batches

    def _short_leadtime_sporadic_strategy(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict,
        max_gap_days: int
    ) -> List[BatchResult]:
        """
        ESTRAT√âGIA PARA LEAD TIME CURTO COM DEMANDAS ESPOR√ÅDICAS
        
        Caracter√≠sticas:
        - Cada demanda √© avaliada individualmente
        - Pedidos antecipados considerando lead time
        - Mais proativa que EOQ tradicional
        - Otimizada para demandas grandes e espa√ßadas
        """
        
        batches = []
        current_stock = initial_stock
        
        # Processar cada demanda individualmente
        demand_dates = sorted(valid_demands.keys())
        
        for i, demand_date_str in enumerate(demand_dates):
            demand_qty = valid_demands[demand_date_str]
            demand_date = pd.to_datetime(demand_date_str)
            
            # Verificar se est√° dentro do per√≠odo v√°lido
            if not (start_cutoff <= demand_date <= end_cutoff):
                continue
            
            # Calcular estoque projetado na data da demanda
            stock_at_demand = self._project_stock_to_date(
                initial_stock, valid_demands, batches, demand_date_str, start_period
            )
            
            # Log interno da estrat√©gia (removido debug)
            
            # L√ìGICA SIMPLIFICADA E MAIS AGRESSIVA: Para demandas espor√°dicas
            
            # Calcular d√©ficit imediato
            shortage = max(0, demand_qty - stock_at_demand)
            
            # Para lead time curto com demandas espor√°dicas, ser MUITO proativo
            # Crit√©rio: criar lote se n√£o h√° estoque suficiente para esta demanda + pr√≥xima demanda
            
            # Calcular pr√≥xima demanda se existir
            next_demand_qty = 0
            if i < len(demand_dates) - 1:
                next_demand_qty = valid_demands[demand_dates[i + 1]]
            
            # Buffer baseado na pr√≥xima demanda ou 50% da atual se for a √∫ltima
            buffer_needed = next_demand_qty if next_demand_qty > 0 else (demand_qty * 0.5)
            
            # SEMPRE criar lote se:
            # 1. H√° d√©ficit imediato, OU
            # 2. Estoque n√£o cobre esta demanda + uma parte significativa da pr√≥xima
            needs_batch = (shortage > 0) or (stock_at_demand < demand_qty + (buffer_needed * 0.3))
            
            # L√≥gica de decis√£o interna (debug removido)
            
            # Decidir se precisa criar lote
            if needs_batch:
                
                # üöö VALIDA√á√ÉO DE PEDIDOS EM TR√ÇNSITO 
                existing_order = self._check_existing_orders_in_transit(
                    demand_date, leadtime_days, batches, shortage, max_gap_days
                )
                
                if existing_order:
                    # ‚úÖ J√Å EXISTE PEDIDO EM TR√ÇNSITO - Consolidar
                    self._consolidate_with_existing_order(
                        existing_order, shortage, demand_date_str, demand_qty
                    )
                    continue  # N√£o criar novo pedido
                
                # Calcular data ideal do pedido (antecipando o lead time)
                ideal_arrival_date = demand_date
                order_date = ideal_arrival_date - pd.Timedelta(days=leadtime_days + safety_days)
                order_date = max(order_date, start_cutoff)
                actual_arrival_date = order_date + pd.Timedelta(days=leadtime_days)
                
                # Verificar se chegar√° dentro do per√≠odo v√°lido
                if actual_arrival_date <= end_cutoff:
                    
                    # Calcular quantidade necess√°ria (l√≥gica ajustada)
                    if shortage > 0:
                        # H√° d√©ficit imediato - cobrir d√©ficit + buffer para pr√≥xima
                        base_quantity = shortage + (buffer_needed * 0.4)  # 40% da pr√≥xima
                    else:
                        # N√£o h√° d√©ficit, mas estoque baixo - criar lote preventivo
                        base_quantity = demand_qty + (buffer_needed * 0.2)  # 20% da pr√≥xima
                    
                    # Adicionar margem de seguran√ßa
                    safety_buffer = demand_qty * (safety_margin_percent / 100) if safety_margin_percent > 0 else 0
                    
                    # Quantidade final
                    batch_quantity = base_quantity + safety_buffer
                    
                    # Aplicar limites m√≠nimos e m√°ximos
                    batch_quantity = max(self.params.min_batch_size, 
                                       min(self.params.max_batch_size, batch_quantity))
                    
                    # Criar analytics avan√ßados
                    analytics = self._create_advanced_batch_analytics(
                        demand_date_str, demand_qty, batch_quantity, stock_at_demand,
                        actual_arrival_date, leadtime_days, safety_days, mrp_calcs, 
                        demand_analysis, "short_leadtime_sporadic",
                        {
                            "shortage_covered": shortage,
                            "safety_buffer": safety_buffer,
                            "next_demand_qty": next_demand_qty,
                            "buffer_needed": buffer_needed,
                            "base_quantity": base_quantity,
                            "proactive_planning": True,
                            "timing_optimized": True,
                            "demand_coverage": min(100.0, (batch_quantity / demand_qty) * 100),
                            "lead_time_days": leadtime_days
                        }
                    )
                    
                    # Criar o lote
                    batch = BatchResult(
                        order_date=order_date.strftime('%Y-%m-%d'),
                        arrival_date=actual_arrival_date.strftime('%Y-%m-%d'),
                        quantity=batch_quantity,
                        analytics=analytics
                    )
                    
                    batches.append(batch)
                    
                    # Atualizar estoque projetado CORRETAMENTE
                    # O estoque ap√≥s chegada do lote (n√£o subtrai demanda aqui, ser√° subtra√≠da na proje√ß√£o)
                    current_stock = stock_at_demand + batch_quantity
        
        return batches

    def _medium_leadtime_sporadic_strategy(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict,
        max_gap_days: int
    ) -> List[BatchResult]:
        """
        Estrat√©gia para lead times m√©dios (15-45 dias) com demandas espor√°dicas
        
        NOVA FUNCIONALIDADE:
        - Evita pedidos redundantes dentro do mesmo per√≠odo de lead time
        - Consolida automaticamente com pedidos j√° em tr√¢nsito
        - Economiza frete e reduz trabalho de compras
        """
        
        batches = []
        demand_dates = sorted(valid_demands.keys())
        
        for i, demand_date_str in enumerate(demand_dates):
            demand_qty = valid_demands[demand_date_str]
            demand_date = pd.to_datetime(demand_date_str)
            
            # Verificar se est√° dentro do per√≠odo v√°lido
            if not (start_cutoff <= demand_date <= end_cutoff):
                continue
            
            # Calcular estoque projetado na data da demanda
            stock_at_demand = self._project_stock_to_date(
                initial_stock, valid_demands, batches, demand_date_str, start_period
            )
            
            # Aplicar safety margin
            safety_buffer = demand_qty * (safety_margin_percent / 100.0)
            required_stock = demand_qty + safety_buffer
            
            # Verificar se precisa de batch
            if stock_at_demand < required_stock:
                # Calcular shortage
                shortage = required_stock - stock_at_demand
                
                # üöö VALIDA√á√ÉO DE PEDIDOS EM TR√ÇNSITO 
                # Verificar se j√° existe pedido que pode cobrir esta demanda
                existing_order = self._check_existing_orders_in_transit(
                    demand_date, leadtime_days, batches, shortage, max_gap_days
                )
                
                if existing_order:
                    # ‚úÖ J√Å EXISTE PEDIDO EM TR√ÇNSITO - Consolidar
                    self._consolidate_with_existing_order(
                        existing_order, shortage, demand_date_str, demand_qty
                    )
                    continue  # N√£o criar novo pedido
                
                # üéØ QUANTIDADE CONSERVADORA: Usar apenas d√©ficit + margem especificada
                base_quantity = shortage
                
                # üéØ MARGEM CONTROLADA: Aplicar APENAS o safety_margin_percent especificado
                safety_buffer = base_quantity * (safety_margin_percent / 100.0) if safety_margin_percent > 0 else 0
                
                # Quantidade final conservadora
                batch_quantity = base_quantity + safety_buffer
                
                # Aplicar limites m√≠nimos apenas se necess√°rio (n√£o for√ßar EOQ)
                batch_quantity = max(batch_quantity, self.params.min_batch_size)
                batch_quantity = min(batch_quantity, self.params.max_batch_size)
                
                # Calcular datas de ordem e chegada
                order_date = demand_date - pd.Timedelta(days=leadtime_days + safety_days)
                arrival_date = order_date + pd.Timedelta(days=leadtime_days)
                
                # Garantir que order_date n√£o seja no passado
                if order_date < start_period:
                    order_date = start_period
                    arrival_date = order_date + pd.Timedelta(days=leadtime_days)
                
                # Criar batch
                batch = BatchResult(
                    order_date=order_date.strftime('%Y-%m-%d'),
                    arrival_date=arrival_date.strftime('%Y-%m-%d'),
                    quantity=round(batch_quantity, 3),
                    analytics=self._create_advanced_batch_analytics(
                        demand_date_str=demand_date_str,
                        demand_quantity=demand_qty,
                        batch_quantity=batch_quantity,
                        stock_before_arrival=stock_at_demand,
                        arrival_date=arrival_date,
                        leadtime_days=leadtime_days,
                        safety_days=safety_days,
                        mrp_calcs=mrp_calcs,
                        demand_analysis=demand_analysis,
                        strategy="medium_leadtime_sporadic",
                        extra_data={
                            'shortage_covered': shortage,
                            'future_demand_considered': future_demand,
                            'consolidation_factor': consolidation_factor,
                            'lookahead_days': lookahead_days
                        }
                    )
                )
                
                batches.append(batch)
        
        return batches
    
    def _check_existing_orders_in_transit(
        self, 
        demand_date: pd.Timestamp, 
        leadtime_days: int, 
        existing_batches: List[BatchResult], 
        shortage: float,
        max_gap_days: int = 14
    ) -> Optional[BatchResult]:
        """
        üöö VALIDA√á√ÉO DE PEDIDOS EM TR√ÇNSITO
        
        Verifica se j√° existe um pedido que pode cobrir a demanda atual.
        Evita pedidos redundantes e economiza frete.
        
        Args:
            demand_date: Data da demanda atual
            leadtime_days: Lead time em dias
            existing_batches: Batches j√° criados
            shortage: Quantidade necess√°ria
            
        Returns:
            BatchResult existente que pode ser consolidado, ou None
        """
        
        # Definir janela de tempo para verificar pedidos em tr√¢nsito
        # Um pedido pode cobrir demandas at√© X dias ap√≥s sua chegada
        coverage_window_days = min(leadtime_days * 2, 45)  # Flex√≠vel: at√© 2x lead time
        
        # üî• AGRUPAMENTO TOTAL: Se max_gap_days for muito alto, agrupar tudo
        if max_gap_days >= 90:  # Se gap muito alto (3+ meses), agrupar agressivamente
            coverage_window_days = max_gap_days  # Usar gap como janela de consolida√ß√£o
            max_consolidation_multiplier = 5.0  # Permitir at√© 5x aumento (super agressivo)
        elif max_gap_days >= 30:  # Gap alto (1+ m√™s), consolida√ß√£o moderada
            coverage_window_days = max_gap_days
            max_consolidation_multiplier = 3.0  # Permitir at√© 3x aumento
        else:
            max_consolidation_multiplier = 2.0  # Padr√£o: at√© 2x aumento
        
        for batch in existing_batches:
            arrival_date = pd.to_datetime(batch.arrival_date)
            
            # Verificar se o pedido pode cobrir a demanda atual
            days_between = (demand_date - arrival_date).days
            
            # Crit√©rios otimizados para consolida√ß√£o:
            # 1. Pedido chega antes ou at√© N dias ap√≥s a demanda
            # 2. Pedido tem capacidade para mais quantidade (at√© 100% aumento)
            # 3. Economia de frete e redu√ß√£o de trabalho administrativo
            
            if -leadtime_days <= days_between <= coverage_window_days:
                # Pedido pode cobrir esta demanda
                current_quantity = batch.quantity
                max_consolidation = current_quantity * max_consolidation_multiplier
                
                if current_quantity + shortage <= max_consolidation:
                    return batch
        
        return None
    
    def _consolidate_with_existing_order(
        self, 
        existing_batch: BatchResult, 
        additional_quantity: float, 
        demand_date_str: str, 
        demand_qty: float
    ) -> None:
        """
        üîÑ CONSOLIDA√á√ÉO DE PEDIDOS
        
        Consolida demanda atual com pedido existente.
        Atualiza quantidade e analytics.
        
        Args:
            existing_batch: Batch existente para consolidar
            additional_quantity: Quantidade adicional necess√°ria
            demand_date_str: Data da demanda sendo consolidada
            demand_qty: Quantidade da demanda
        """
        
        # Atualizar quantidade do batch
        existing_batch.quantity = round(existing_batch.quantity + additional_quantity, 3)
        
        # Atualizar analytics com informa√ß√£o de consolida√ß√£o
        if 'consolidations' not in existing_batch.analytics:
            existing_batch.analytics['consolidations'] = []
        
        existing_batch.analytics['consolidations'].append({
            'demand_date': demand_date_str,
            'demand_quantity': demand_qty,
            'additional_quantity': additional_quantity,
            'consolidation_reason': 'Pedido em tr√¢nsito - Economia de frete'
        })
        
        # Atualizar contadores
        existing_batch.analytics['total_demands_covered'] = existing_batch.analytics.get('total_demands_covered', 1) + 1
        existing_batch.analytics['optimization_quality'] = 'excellent'  # Consolida√ß√£o √© sempre excelente
        existing_batch.analytics['cost_efficiency'] = 'optimized_freight'

    # ====== ESTRAT√âGIA BUFFER DIN√ÇMICO (EM STANDBY) ======
    # Esta estrat√©gia est√° comentada para simplificar o sistema
    # Pode ser reativada no futuro se necess√°rio
    def _dynamic_buffer_strategy_STANDBY(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict
    ) -> List[BatchResult]:
        """Estrat√©gia com buffer din√¢mico para alta variabilidade"""
        
        batches = []
        current_stock = initial_stock
        
        # Para alta variabilidade, usar buffers maiores e lotes menores
        dynamic_safety_multiplier = 1 + demand_analysis['cv']
        
        demand_dates = sorted(valid_demands.keys())
        
        for demand_date_str in demand_dates:
            demand_date = pd.to_datetime(demand_date_str)
            demand_qty = valid_demands[demand_date_str]
            
            # Buffer din√¢mico baseado na demanda espec√≠fica
            if demand_qty > demand_analysis['mean_demand'] * 1.5:
                # Demanda pico - buffer extra
                dynamic_buffer = mrp_calcs.safety_stock * dynamic_safety_multiplier * 1.5
            else:
                dynamic_buffer = mrp_calcs.safety_stock * dynamic_safety_multiplier
            
            # Projetar estoque
            stock_at_demand = self._project_stock_to_date(
                initial_stock, valid_demands, batches, demand_date_str, start_period
            )
            
            # Crit√©rio mais agressivo para pedidos
            if stock_at_demand < (demand_qty + dynamic_buffer):
                
                order_date = demand_date - pd.Timedelta(days=leadtime_days + safety_days)
                order_date = max(order_date, start_cutoff)
                arrival_date = order_date + pd.Timedelta(days=leadtime_days)
                
                if arrival_date <= end_cutoff:
                    
                    # Quantidade baseada na demanda + buffer din√¢mico
                    shortfall = max(0, demand_qty + dynamic_buffer - stock_at_demand)
                    batch_quantity = shortfall + (demand_qty * 0.2)  # 20% extra para variabilidade
                    
                    batch_quantity = max(self.params.min_batch_size, 
                                       min(self.params.max_batch_size, batch_quantity))
                    
                    analytics = self._create_advanced_batch_analytics(
                        demand_date_str, demand_qty, batch_quantity, stock_at_demand,
                        arrival_date, leadtime_days, safety_days, mrp_calcs, demand_analysis,
                        strategy='dynamic_buffer', 
                        extra_data={'dynamic_buffer': dynamic_buffer, 'variability_multiplier': dynamic_safety_multiplier}
                    )
                    
                    batch = BatchResult(
                        order_date=order_date.strftime('%Y-%m-%d'),
                        arrival_date=arrival_date.strftime('%Y-%m-%d'),
                        quantity=round(batch_quantity, 3),
                        analytics=analytics
                    )
                    batches.append(batch)
                    current_stock = stock_at_demand + batch_quantity
        
        return batches
    
    # ====== ESTRAT√âGIA PREVIS√ÉO AVAN√áADA (EM STANDBY) ======
    # Esta estrat√©gia est√° comentada para simplificar o sistema
    # Muito complexa para lead times longos simples
    def _long_leadtime_forecasting_strategy_STANDBY(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict
    ) -> List[BatchResult]:
        """ESTRAT√âGIA CORRIGIDA: Para lead times longos - COMPLETAMENTE REESCRITA"""
        
        batches = []
        demand_dates = sorted(valid_demands.keys())
        
        # NOVA L√ìGICA: Calcular quando come√ßar a produzir para cobrir TODAS as demandas
        first_demand_date = pd.to_datetime(demand_dates[0])
        
        # Para lead times muito longos, fazer poucos lotes grandes estrat√©gicos
        total_demand = sum(valid_demands.values())
        
        # Calcular quando o estoque vai acabar
        days_coverage = initial_stock / (total_demand / len(demand_dates)) if demand_dates else 0
        estimated_stockout = start_period + pd.Timedelta(days=int(days_coverage))
        
        # CORRE√á√ÉO CR√çTICA: Garantir que primeira produ√ß√£o chega ANTES da primeira demanda
        # Calcular a data ideal de chegada
        ideal_arrival = first_demand_date - pd.Timedelta(days=safety_days + 3)  # 3 dias extras de buffer
        
        # Calcular a data ideal do pedido
        ideal_order_date = ideal_arrival - pd.Timedelta(days=leadtime_days)
        
        # NOVA L√ìGICA: Se ideal_order_date √© antes do start_cutoff, fazer c√°lculo reverso
        if ideal_order_date < start_cutoff:
            # Calcular o m√°ximo lead time poss√≠vel dentro das restri√ß√µes
            max_possible_leadtime = (first_demand_date - start_cutoff).days - safety_days - 3
            
            if max_possible_leadtime < leadtime_days:
                # Lead time maior que o tempo dispon√≠vel - usar toda a janela dispon√≠vel
                first_order_date = start_cutoff
                # Calcular quando realmente chegar√°
                actual_arrival = start_cutoff + pd.Timedelta(days=leadtime_days)
                
                # Se ainda assim chega depois da demanda, √© lead time cr√≠tico
                if actual_arrival >= first_demand_date:
                    # Lead time MUITO cr√≠tico - chegada vai ser depois da demanda
                    # Precisamos de estrat√©gia de emerg√™ncia: lote MAIOR para compensar atraso
                    print(f"‚ö†Ô∏è  CRITICAL LEAD TIME: Batch will arrive {(actual_arrival - first_demand_date).days} days after first demand")
                    first_batch_arrival = actual_arrival
                else:
                    first_batch_arrival = actual_arrival
            else:
                # H√° tempo suficiente, usar data ideal
                first_order_date = start_cutoff
                first_batch_arrival = ideal_arrival
        else:
            # Situa√ß√£o ideal - sem restri√ß√µes
            first_order_date = ideal_order_date
            first_batch_arrival = ideal_arrival
        
        # ESTRAT√âGIA SIMPLIFICADA: M√°ximo 2-3 lotes grandes para lead times longos
        if leadtime_days >= 60:
            num_batches = min(2, len(demand_dates))  # M√°ximo 2 lotes
        else:
            num_batches = min(3, len(demand_dates))  # M√°ximo 3 lotes
        
        # Dividir demandas por lote
        demands_per_batch = len(demand_dates) / num_batches
        batch_size = total_demand / num_batches
        
        # Adicionar buffer substancial para lead times longos
        safety_buffer = total_demand * 0.3  # 30% extra
        
        # NOVA L√ìGICA: Se primeiro lote chega depois da primeira demanda, compensar com quantidade maior
        late_arrival_compensation = 0
        if first_batch_arrival >= first_demand_date:
            days_late = (first_batch_arrival - first_demand_date).days
            # Compensa√ß√£o por atraso: aumentar a quantidade do primeiro lote
            late_arrival_compensation = valid_demands[demand_dates[0]] * (1 + days_late * 0.1)  # 10% extra por dia de atraso
            print(f"üö® LATE ARRIVAL COMPENSATION: Adding {late_arrival_compensation:.0f} units for {days_late} days delay")
        
        batch_size_with_buffer = (batch_size + safety_buffer / num_batches + late_arrival_compensation / num_batches)
        
        # Aplicar limites
        batch_size_with_buffer = max(self.params.min_batch_size, 
                                   min(self.params.max_batch_size, batch_size_with_buffer))
        
        current_order_date = first_order_date
        current_arrival_date = first_batch_arrival
        
        for batch_num in range(num_batches):
            # Calcular qual demanda este lote est√° cobrindo
            demand_start_idx = int(batch_num * demands_per_batch)
            demand_end_idx = min(int((batch_num + 1) * demands_per_batch), len(demand_dates))
            
            if demand_start_idx >= len(demand_dates):
                break
                
            primary_demand_date = demand_dates[demand_start_idx]
            
            # Calcular estoque antes da chegada deste lote
            stock_before = self._project_stock_to_date(
                initial_stock, valid_demands, batches, current_arrival_date.strftime('%Y-%m-%d'), start_period
            )
            
            # VERIFICAR SE REALMENTE PRECISA DESTE LOTE
            demands_covered_by_batch = []
            total_demand_to_cover = 0
            
            for idx in range(demand_start_idx, demand_end_idx):
                if idx < len(demand_dates):
                    date_str = demand_dates[idx]
                    qty = valid_demands[date_str]
                    demands_covered_by_batch.append({'date': date_str, 'quantity': qty})
                    total_demand_to_cover += qty
            
            # CORRE√á√ÉO CR√çTICA: Para primeira demanda, sempre verificar se lote chega a tempo
            shortage = max(0, total_demand_to_cover - stock_before)
            
            # Para o primeiro lote, verificar se h√° risco de stockout na primeira demanda
            first_demand_risk = False
            if batch_num == 0 and len(demand_dates) > 0:
                first_demand_date_obj = pd.to_datetime(demand_dates[0])
                first_demand_qty = valid_demands[demand_dates[0]]
                
                # Se o lote chega depois da primeira demanda, h√° risco
                if current_arrival_date > first_demand_date_obj:
                    print(f"‚ö†Ô∏è  TIMING RISK: First batch arrives {(current_arrival_date - first_demand_date_obj).days} days AFTER first demand")
                    first_demand_risk = True
                    # Ajustar a quantidade para incluir estoque de emerg√™ncia
                    shortage = max(shortage, first_demand_qty * 1.5)  # 150% da primeira demanda como emerg√™ncia
            
            needs_batch = shortage > 0 or batch_num == 0 or first_demand_risk  # Primeira sempre precisa
            
            if needs_batch and current_arrival_date <= end_cutoff:
                # Quantidade final do lote
                final_quantity = max(batch_size_with_buffer, shortage * 1.2)
                final_quantity = max(self.params.min_batch_size, 
                                   min(self.params.max_batch_size, final_quantity))
                
                # Analytics espec√≠ficos
                analytics = self._create_advanced_batch_analytics(
                    primary_demand_date, total_demand_to_cover, final_quantity, stock_before,
                    current_arrival_date, leadtime_days, safety_days, mrp_calcs, demand_analysis,
                    strategy='long_leadtime_forecasting',
                    extra_data={
                        'demand_sequence': batch_num + 1,
                        'total_demands': len(demand_dates),
                        'coverage_horizon_days': min(leadtime_days + 45, 115),
                        'future_demands_covered': round(total_demand_to_cover - valid_demands.get(primary_demand_date, 0), 2),
                        'lead_time_buffer': round(final_quantity * 0.2, 2),
                        'safety_buffer_multiplier': 1.5,
                        'long_leadtime_risk_mitigation': True,
                        'eoq_influence': round(mrp_calcs.eoq * 0.8, 2),
                        'total_safety_margin': round(safety_buffer / num_batches, 2)
                    }
                )
                
                batch = BatchResult(
                    order_date=current_order_date.strftime('%Y-%m-%d'),
                    arrival_date=current_arrival_date.strftime('%Y-%m-%d'),
                    quantity=round(final_quantity, 3),
                    analytics=analytics
                )
                
                batches.append(batch)
                
                # PR√ìXIMO LOTE: Espa√ßar adequadamente
                if batch_num < num_batches - 1 and demand_end_idx < len(demand_dates):
                    next_demand_date = pd.to_datetime(demand_dates[demand_end_idx])
                    
                    # Pr√≥ximo lote deve chegar um tempo antes da pr√≥xima demanda n√£o coberta
                    next_arrival = next_demand_date - pd.Timedelta(days=safety_days + 2)
                    next_order = next_arrival - pd.Timedelta(days=leadtime_days)
                    
                    # Garantir que n√£o h√° overlap de produ√ß√£o
                    min_next_order = current_order_date + pd.Timedelta(days=7)  # M√≠nimo 7 dias entre pedidos
                    next_order = max(next_order, min_next_order)
                    
                    current_order_date = next_order
                    current_arrival_date = next_order + pd.Timedelta(days=leadtime_days)
                
        # Ordenar lotes por data de chegada para garantir sequ√™ncia correta
        batches.sort(key=lambda b: pd.to_datetime(b.arrival_date))
        
        # VALIDA√á√ÉO FINAL SIMPLIFICADA: Verificar se h√° cobertura b√°sica
        if batches:
            total_produced = sum(batch.quantity for batch in batches)
            coverage_ratio = total_produced / total_demand if total_demand > 0 else 1
            
            # Se cobertura √© muito baixa (menos de 80%), adicionar um lote final conservador
            if coverage_ratio < 0.8 and len(batches) < 3:
                last_demand_date = pd.to_datetime(demand_dates[-1])
                buffer_arrival = last_demand_date - pd.Timedelta(days=safety_days)
                buffer_order = buffer_arrival - pd.Timedelta(days=leadtime_days)
                buffer_order = max(buffer_order, start_cutoff)
                buffer_actual_arrival = buffer_order + pd.Timedelta(days=leadtime_days)
                
                if buffer_actual_arrival <= end_cutoff:
                    buffer_quantity = max(
                        self.params.min_batch_size,
                        total_demand * 0.3  # 30% da demanda total como buffer
                    )
                    buffer_quantity = min(buffer_quantity, self.params.max_batch_size)
                    
                    buffer_analytics = self._create_advanced_batch_analytics(
                        demand_dates[-1], valid_demands[demand_dates[-1]], buffer_quantity, 0,
                        buffer_actual_arrival, leadtime_days, safety_days, mrp_calcs, demand_analysis,
                        strategy='long_leadtime_forecasting',
                        extra_data={
                            'buffer_batch': True,
                            'coverage_enhancement': True,
                            'target_coverage': '100%'
                        }
                    )
                    
                    buffer_batch = BatchResult(
                        order_date=buffer_order.strftime('%Y-%m-%d'),
                        arrival_date=buffer_actual_arrival.strftime('%Y-%m-%d'),
                        quantity=round(buffer_quantity, 3),
                        analytics=buffer_analytics
                    )
                    
                    batches.append(buffer_batch)
        
        return batches
    
    def _hybrid_consolidation_strategy(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict,
        max_gap_days: int
    ) -> List[BatchResult]:
        """Estrat√©gia h√≠brida combinando consolida√ß√£o inteligente com EOQ"""
        
        # Identificar grupos de consolida√ß√£o baseado em an√°lise avan√ßada
        demand_groups = self._identify_optimal_consolidation_groups(
            valid_demands, mrp_calcs, demand_analysis, leadtime_days
        )
        
        batches = []
        
        for group in demand_groups:
            # Usar primeira demanda do grupo como √¢ncora
            primary_date = pd.to_datetime(group['primary_date'])
            group_demand = group['total_demand']
            
            # üöö VALIDA√á√ÉO DE PEDIDOS EM TR√ÇNSITO 
            # Para grupos de consolida√ß√£o, considerar o d√©ficit total do grupo
            estimated_shortage = group_demand * 0.7  # Estimativa conservadora de shortage
            existing_order = self._check_existing_orders_in_transit(
                primary_date, leadtime_days, batches, estimated_shortage, max_gap_days
            )
            
            if existing_order:
                # ‚úÖ J√Å EXISTE PEDIDO EM TR√ÇNSITO - Consolidar grupo inteiro
                self._consolidate_with_existing_order(
                    existing_order, estimated_shortage, group['primary_date'], group_demand
                )
                continue  # N√£o criar novo pedido para este grupo
            
            # üéØ CORRE√á√ÉO SAFETY_DAYS: Calcular data alvo com safety_days primeiro
            target_arrival_date = primary_date - pd.Timedelta(days=safety_days)
            ideal_order_date = target_arrival_date - pd.Timedelta(days=leadtime_days)
            
            # Ajustar order_date se necess√°rio, mas manter target_arrival_date
            order_date = max(ideal_order_date, start_cutoff)
            arrival_date = target_arrival_date  # Manter data alvo com safety_days
            
            if arrival_date <= end_cutoff:
                
                # üéØ CORRE√á√ÉO: Calcular d√©ficit real primeiro
                projected_stock = self._project_stock_to_date(
                    initial_stock, valid_demands, batches, group['primary_date'], start_period
                )
                
                # D√©ficit real = demanda do grupo - estoque dispon√≠vel
                deficit = max(0, group_demand - projected_stock)
                
                if deficit > 0:
                    # H√° d√©ficit real - calcular quantidade com margem
                    # üéØ APLICAR SAFETY_MARGIN_PERCENT sobre o d√©ficit
                    safety_buffer = deficit * (safety_margin_percent / 100.0) if safety_margin_percent > 0 else 0
                    batch_quantity = deficit + safety_buffer
                    
                    # Adicionar buffer inteligente baseado no grupo (opcional)
                    if group['consolidation_benefit'] > 0:
                        consolidation_buffer = deficit * 0.1  # 10% extra do d√©ficit
                        batch_quantity += consolidation_buffer
                else:
                    # Sem d√©ficit - n√£o criar lote (comportamento conservador)
                    continue
                
                batch_quantity = max(self.params.min_batch_size, 
                                   min(self.params.max_batch_size, batch_quantity))
                
                analytics = self._create_advanced_batch_analytics(
                    group['primary_date'], group['demands'][0]['quantity'],
                    batch_quantity, initial_stock, arrival_date, leadtime_days, 
                    safety_days, mrp_calcs, demand_analysis,
                    strategy='hybrid_consolidation',
                    extra_data={
                        'group_size': len(group['demands']),
                        'consolidation_benefit': group['consolidation_benefit'],
                        'demands_covered': group['demands'],
                        'group_span_days': group['span_days']
                    }
                )
                
                batch = BatchResult(
                    order_date=order_date.strftime('%Y-%m-%d'),
                    arrival_date=arrival_date.strftime('%Y-%m-%d'),
                    quantity=round(batch_quantity, 3),
                    analytics=analytics
                )
                batches.append(batch)
        
        return batches 

    # =============== M√âTODOS AUXILIARES ===============
    
    def _project_stock_to_date(
        self,
        initial_stock: float,  # CORRE√á√ÉO: usar initial_stock, n√£o current_stock
        valid_demands: Dict[str, float],
        existing_batches: List[BatchResult],
        target_date: str,
        start_period: pd.Timestamp
    ) -> float:
        """
        Projeta estoque at√© uma data espec√≠fica ANTES de qualquer movimenta√ß√£o nessa data
        Retorna o estoque dispon√≠vel no in√≠cio da data alvo, antes da demanda e chegadas
        
        IMPORTANTE: Sempre parte do estoque inicial e calcula tudo do zero para evitar erros acumulativos
        """
        
        projected_stock = initial_stock
        target_dt = pd.to_datetime(target_date)
        
        # Criar lista de eventos em ordem cronol√≥gica
        events = []
        
        # Adicionar chegadas de lotes
        for batch in existing_batches:
            events.append({
                'date': pd.to_datetime(batch.arrival_date),
                'type': 'arrival',
                'quantity': batch.quantity
            })
        
        # Adicionar demandas
        for date_str, qty in valid_demands.items():
            events.append({
                'date': pd.to_datetime(date_str),
                'type': 'demand',
                'quantity': qty
            })
        
        # Ordenar eventos cronologicamente
        # Chegadas acontecem no in√≠cio do dia, demandas no final
        events.sort(key=lambda x: (x['date'], x['type'] == 'demand'))
        
        # Processar eventos at√© ANTES da data alvo
        for event in events:
            if event['date'] >= target_dt:
                break
                
            if event['type'] == 'arrival':
                projected_stock += event['quantity']
            elif event['type'] == 'demand':
                projected_stock -= event['quantity']
        
        return projected_stock
    
    def _forecast_demand_advanced(
        self,
        valid_demands: Dict[str, float],
        demand_analysis: Dict,
        leadtime_days: int
    ) -> float:
        """Previs√£o avan√ßada de demanda usando m√∫ltiplos m√©todos"""
        
        if not valid_demands or leadtime_days <= 0:
            return 0
        
        demands = list(valid_demands.values())
        dates = [pd.to_datetime(d) for d in valid_demands.keys()]
        
        # M√©todo 1: M√©dia m√≥vel ponderada
        if len(demands) >= 3:
            weights = np.array([0.5, 0.3, 0.2])  # Mais peso para dados recentes
            recent_demands = demands[-3:]
            if len(recent_demands) == 3:
                forecast_ma = np.average(recent_demands, weights=weights)
            else:
                forecast_ma = np.mean(demands)
        else:
            forecast_ma = np.mean(demands) if demands else 0
        
        # M√©todo 2: Tend√™ncia linear
        if len(demands) >= 3:
            x = np.arange(len(demands))
            slope, intercept = np.polyfit(x, demands, 1)
            forecast_trend = intercept + slope * len(demands)  # Pr√≥ximo ponto
        else:
            forecast_trend = forecast_ma
        
        # M√©todo 3: Sazonalidade se detectada
        forecast_seasonal = forecast_ma
        if demand_analysis['seasonality']['detected']:
            seasonal_factor = 1 + (demand_analysis['seasonality']['strength'] * 0.1)
            if demand_analysis['seasonality']['type'] == 'weekly':
                # Ajustar baseado no dia da semana
                last_date = dates[-1] if dates else datetime.now()
                future_weekday = (last_date.weekday() + leadtime_days) % 7
                if future_weekday in [0, 1]:  # Segunda/Ter√ßa geralmente maior demanda
                    seasonal_factor *= 1.1
                forecast_seasonal = forecast_ma * seasonal_factor
        
        # Combinar m√©todos com pesos baseados na confiabilidade
        if demand_analysis['trend']['significance'] == 'high':
            # Tend√™ncia forte - dar mais peso ao m√©todo de tend√™ncia
            final_forecast = (forecast_trend * 0.5 + forecast_ma * 0.3 + forecast_seasonal * 0.2)
        elif demand_analysis['seasonality']['detected']:
            # Sazonalidade detectada - dar mais peso ao m√©todo sazonal
            final_forecast = (forecast_seasonal * 0.5 + forecast_ma * 0.3 + forecast_trend * 0.2)
        else:
            # Caso padr√£o - m√©dia m√≥vel ponderada
            final_forecast = (forecast_ma * 0.6 + forecast_trend * 0.2 + forecast_seasonal * 0.2)
        
        # Ajustar para lead time (quanto maior o lead time, maior a incerteza)
        uncertainty_factor = 1 + (leadtime_days / 365) * demand_analysis['cv']
        final_forecast *= uncertainty_factor
        
        # Garantir que n√£o seja negativo
        return max(0, final_forecast)
    
    def _identify_optimal_consolidation_groups(
        self,
        valid_demands: Dict[str, float],
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict,
        leadtime_days: int
    ) -> List[Dict]:
        """Identifica grupos √≥timos para consolida√ß√£o usando an√°lise de custos"""
        
        demand_items = [(date, qty) for date, qty in sorted(valid_demands.items())]
        groups = []
        
        i = 0
        while i < len(demand_items):
            current_group = {
                'primary_date': demand_items[i][0],
                'demands': [{'date': demand_items[i][0], 'quantity': demand_items[i][1]}],
                'total_demand': demand_items[i][1],
                'span_days': 0,
                'consolidation_benefit': 0
            }
            
            # Procurar demandas pr√≥ximas para consolidar
            j = i + 1
            while j < len(demand_items) and j - i < 5:  # M√°ximo 5 demandas por grupo
                
                next_date = pd.to_datetime(demand_items[j][0])
                primary_date = pd.to_datetime(current_group['primary_date'])
                gap_days = (next_date - primary_date).days
                
                # An√°lise de custo-benef√≠cio da consolida√ß√£o
                setup_savings = self.params.setup_cost  # Economia de um setup
                holding_cost_increase = demand_items[j][1] * mrp_calcs.holding_cost_per_unit * (gap_days / 365)
                
                # Benef√≠cios operacionais adicionais
                operational_benefit = 0
                if gap_days <= leadtime_days:  # Dentro do lead time
                    operational_benefit += self.params.setup_cost * 0.3  # 30% de benef√≠cio operacional
                
                net_benefit = setup_savings + operational_benefit - holding_cost_increase
                
                # Crit√©rios para consolida√ß√£o
                should_consolidate = (
                    gap_days <= min(30, leadtime_days + 14) and  # Limite temporal
                    net_benefit > 0 and  # Benef√≠cio econ√¥mico positivo
                    current_group['total_demand'] + demand_items[j][1] <= self.params.max_batch_size  # Limite de capacidade
                )
                
                if should_consolidate:
                    current_group['demands'].append({
                        'date': demand_items[j][0], 
                        'quantity': demand_items[j][1]
                    })
                    current_group['total_demand'] += demand_items[j][1]
                    current_group['span_days'] = gap_days
                    current_group['consolidation_benefit'] += net_benefit
                    j += 1
                else:
                    break
            
            groups.append(current_group)
            i = j if j > i else i + 1
        
        return groups
    
    def _create_advanced_batch_analytics(
        self,
        demand_date_str: str,
        demand_quantity: float,
        batch_quantity: float,
        stock_before_arrival: float,
        arrival_date: pd.Timestamp,
        leadtime_days: int,
        safety_days: int,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict,
        strategy: str,
        extra_data: Dict = None
    ) -> Dict:
        """Cria analytics avan√ßados mantendo compatibilidade total"""
        
        demand_date = pd.to_datetime(demand_date_str)
        
        # Calcular stock_after_arrival corretamente
        # Se a chegada √© no mesmo dia da demanda, consideramos o estoque ap√≥s chegada mas antes da demanda
        # Se a chegada √© em dia diferente, √© apenas stock_before + batch_quantity
        arrival_date_str = arrival_date.strftime('%Y-%m-%d')
        if arrival_date_str == demand_date_str:
            # Chegada no mesmo dia da demanda: estoque ap√≥s chegada mas antes da demanda ser consumida
            stock_after_arrival = stock_before_arrival + batch_quantity
        else:
            # Chegada em dia diferente: simplesmente adicionar ao estoque
            stock_after_arrival = stock_before_arrival + batch_quantity
        
        # Analytics b√°sicos (compatibilidade total)
        analytics = {
            # Campos obrigat√≥rios existentes
            'stock_before_arrival': round(stock_before_arrival, 2),
            'stock_after_arrival': round(stock_after_arrival, 2),
            'consumption_since_last_arrival': 0,  # Ser√° calculado posteriormente
            'coverage_days': round(batch_quantity / demand_analysis['mean_demand']) if demand_analysis['mean_demand'] > 0 else 0,
            'actual_lead_time': leadtime_days,
            'urgency_level': 'critical' if stock_before_arrival < 0 else ('high' if stock_before_arrival < demand_quantity else 'normal'),
            'production_start_delay': 0,
            'arrival_delay': max(0, (arrival_date - demand_date).days),
            
            # Campos espor√°dicos existentes
            'target_demand_date': demand_date_str,
            'target_demand_quantity': demand_quantity,
            'shortfall_covered': round(max(0, demand_quantity - stock_before_arrival), 2),
            'demands_covered': [],  # Ser√° calculado posteriormente
            'coverage_count': 0,  # Ser√° calculado posteriormente
            'is_critical': arrival_date > demand_date,
            'safety_margin_days': (demand_date - arrival_date).days,
            'efficiency_ratio': round(batch_quantity / demand_quantity, 2) if demand_quantity > 0 else 0,
            
            # NOVOS CAMPOS - Analytics Avan√ßados
            'advanced_mrp_strategy': strategy,
            'eoq_used': round(mrp_calcs.eoq, 2),
            'safety_stock_calculated': round(mrp_calcs.safety_stock, 2),
            'reorder_point_used': round(mrp_calcs.reorder_point, 2),
            'service_level_z_score': round(mrp_calcs.service_level_z_score, 3),
            'abc_classification': mrp_calcs.abc_classification,
            'xyz_classification': mrp_calcs.xyz_classification,
            'demand_variability_cv': round(demand_analysis['cv'], 3),
            'demand_regularity_score': round(demand_analysis['regularity_score'], 3),
            'seasonality_detected': demand_analysis['seasonality']['detected'],
            'trend_direction': demand_analysis['trend']['direction'],
            'holding_cost_impact': round(batch_quantity * mrp_calcs.holding_cost_per_unit * (leadtime_days + safety_days) / 365, 2),
            'setup_cost_allocation': round(self.params.setup_cost, 2),
            'total_cost_estimated': round(
                self.params.setup_cost + 
                (batch_quantity * mrp_calcs.holding_cost_per_unit * (leadtime_days + safety_days) / 365), 2
            ),
            'optimization_quality': self._calculate_optimization_quality(
                batch_quantity, mrp_calcs, demand_analysis, strategy
            )
        }
        
        # Adicionar dados extras espec√≠ficos da estrat√©gia
        if extra_data:
            for key, value in extra_data.items():
                analytics[f'strategy_{key}'] = value
        
        return analytics
    
    def _calculate_optimization_quality(
        self,
        batch_quantity: float,
        mrp_calcs: AdvancedMRPCalculations,
        demand_analysis: Dict,
        strategy: str
    ) -> str:
        """Calcula qualidade da otimiza√ß√£o"""
        
        # Crit√©rios para qualidade
        eoq_adherence = 1 - abs(batch_quantity - mrp_calcs.eoq) / mrp_calcs.eoq if mrp_calcs.eoq > 0 else 0
        
        if strategy == 'just_in_time':
            return 'excellent'  # Just-in-time √© sempre √≥timo para lead time zero
        elif strategy == 'short_leadtime_sporadic':
            return 'excellent'  # Estrat√©gia otimizada para lead times curtos
        elif strategy == 'medium_leadtime_sporadic':
            return 'excellent'  # Estrat√©gia otimizada para lead times m√©dios
        elif strategy == 'hybrid_consolidation':
            return 'good'  # Estrat√©gia de consolida√ß√£o simples e eficaz
        # ====== ESTRAT√âGIAS EM STANDBY ======
        # elif strategy == 'eoq_based' and eoq_adherence > 0.8:
        #     return 'excellent'
        # elif strategy == 'dynamic_buffer' and demand_analysis['variability_level'] == 'high':
        #     return 'good'
        # elif strategy == 'long_leadtime_forecasting' and demand_analysis['trend']['significance'] in ['medium', 'high']:
        #     return 'good'
        else:
            return 'fair'


# =============== INTEGRA√á√ÉO COM MRP EXISTENTE ===============

def integrate_advanced_mrp_with_existing(mrp_optimizer_instance):
    """
    Integra o planejador avan√ßado com a inst√¢ncia existente do MRPOptimizer
    Substitui a fun√ß√£o _plan_sporadic_batches por uma vers√£o avan√ßada
    """
    
    def _plan_sporadic_batches_advanced_wrapper(
        self,
        valid_demands: Dict[str, float],
        initial_stock: float,
        leadtime_days: int,
        start_period: pd.Timestamp,
        end_period: pd.Timestamp,
        start_cutoff: pd.Timestamp,
        end_cutoff: pd.Timestamp,
        safety_days: int,
        safety_margin_percent: float,
        absolute_minimum_stock: float,
        max_gap_days: int
    ) -> List[BatchResult]:
        """Wrapper que usa o planejador avan√ßado"""
        
        # Criar inst√¢ncia do planejador avan√ßado
        advanced_planner = AdvancedSporadicMRPPlanner(self.params)
        
        # Usar planejamento avan√ßado
        return advanced_planner.plan_sporadic_batches_advanced(
            valid_demands=valid_demands,
            initial_stock=initial_stock,
            leadtime_days=leadtime_days,
            start_period=start_period,
            end_period=end_period,
            start_cutoff=start_cutoff,
            end_cutoff=end_cutoff,
            safety_days=safety_days,
            safety_margin_percent=safety_margin_percent,
            absolute_minimum_stock=absolute_minimum_stock,
            max_gap_days=max_gap_days
        )
    
    # Substituir o m√©todo na inst√¢ncia
    import types
    mrp_optimizer_instance._plan_sporadic_batches = types.MethodType(
        _plan_sporadic_batches_advanced_wrapper, mrp_optimizer_instance
    )
    
    return mrp_optimizer_instance


# =============== FUN√á√ÉO DE CONVENI√äNCIA ===============

def create_advanced_mrp_optimizer(optimization_params: Optional[OptimizationParams] = None):
    """
    Cria um MRPOptimizer com capacidades avan√ßadas integradas
    """
    from mrp import MRPOptimizer
    
    # Criar otimizador padr√£o
    optimizer = MRPOptimizer(optimization_params)
    
    # Integrar capacidades avan√ßadas
    return integrate_advanced_mrp_with_existing(optimizer) 